class Solution {
  public static void main(String[] args){
    int[] x = {3,2,1,6,0,5};
    TreeNode y = constructMaximumBinaryTree(x);
    
    System.out.println(y.val);
    System.out.println(y.left.val);
    System.out.println(y.right.val);
    System.out.println(y.left.right.val);
    System.out.println(y.right.left.val);
    System.out.println(y.left.right.right.val);
    
  }
  public static TreeNode constructMaximumBinaryTree(int[] nums) {
    return add(nums, 0, nums.length-1);
    /*
    if(nums.length == 1){
      return new TreeNode(nums[0]);
    }
    
    int max = nums[0];
    
    int index = 0;
    for(int i = 0; i < nums.length; i++){
      if(nums[i] > max){
        max = nums[i];
        index = i;
      }
    }
    TreeNode curr = new TreeNode(max);
    
//left array
    if(index > 0){
      int[] left = new int[index];
      for(int i=0; i<index; i++){
        left[i] = nums[i];
      }
      curr.left = constructMaximumBinaryTree(left);
    }
    //right array
    if(index < nums.length-1){
      int[] right = new int[nums.length - index-1];
      for(int i=0; i < right.length; i++){
        right[i] = nums[index + 1 + i];
      }
      curr.right = constructMaximumBinaryTree(right);
    }   
    return curr;*/
    
  }
  
  
  public static TreeNode add(int[] arr, int start, int end){
    if (end < start) return null;
    if(arr.length == 1){
      return new TreeNode(arr[start]);
    }
    
    int max = arr[start];
    
    int index = start;
    for(int i = start; i < end; i++){
      if(arr[i] > max){
        max = arr[i];
        index = i;
      }
    }
    
    TreeNode curr = new TreeNode(max);
    
    curr.left = add(arr, start-1, index);
    curr.right = add(arr, index+1, end);
    return curr;
    
  }
}